@page "/placementdescriptioncreation"
@using Entities
@using System.ComponentModel.DataAnnotations;
@inject HttpClient httpClient


@if (keywords == null)
{
    <p><em>Loading...</em></p>
}
else
{    
    <div class="container settingsView">
        <div class="row">
            <div class="col-12">
                <h1>Create Placement Description</h1>
            </div>
        </div>
        <div class="row">
            <div class="col-12">
                <form>
                    @* TODO: Implement secret input from user *@    
                    <input type="hidden" class="form-check-input" id="userID">
                    <hr>
                    <div class="form-group">
                        <label for="degree">Degree</label>
                        <select class="form-control" id="degree">
                            @* TODO: Retrieve these from enum*@    
                            <option selected="selected" value="bachelor">Please select</option>
                        </select>
                    </div>
                    <hr>
                    <div class="form-group">
                        <label for="keywordSelect">Keywords</label>
                        <div class="form-group row" id="keywordSelect">
                            <div class="col-sm-6">
                                @for(var i = 0; i<keywords.Length/2; i++){
                                    <div class="form-check">
                                        <input type="checkbox" class="form-check-input" id='@(keywords[i].ToString())'>
                                        <label class="form-check-label" for="exampleCheck1">@keywords[i]</label>
                                    </div>
                                }
                            </div>
                            <div class="col-sm-6">
                                @for(var i = keywords.Length/2; i<keywords.Length; i++){
                                    <div class="form-check">
                                        <input type="checkbox" class="form-check-input" id='@(keywords[i].ToString())'>
                                        <label class="form-check-label" for="exampleCheck1">@keywords[i]</label>
                                    </div>
                                }                                
                            </div>
                        </div>
                    </div>
                    <hr>
                    <div class="form-group row">
                        <label for="workingHours" class="col-sm-5 col-form-label">Working-hours</label>
                        <div class="col-sm-7">
                            <input type="number" class="form-control" id="workingHours">
                        </div>
                    </div>
                    <hr>
                    <div class="form-group">
                        <label for="salary">Salary</label>
                        <input type="range" class="custom-range" id="salary" min="0" max="100">
                    </div>
                    <hr>
                    <label>Agreement</label>
                    <div class="form-row">
                        <div class="form-group col-md-6">
                            <div class="form-check">
                                <input class="form-check-input" type="radio" name="yesAgreement" id="yesAgreement" value="yes" checked>
                                <label class="form-check-label" for="yesAgreement">
                                    Yes
                                </label>
                            </div>
                        </div>
                        <div class="form-group col-md-6">
                            <div class="form-check">
                                <input class="form-check-input" type="radio" name="noAgreement" id="noAgreement" value="no">
                                <label class="form-check-label" for="noAgreement">
                                    No
                                </label>
                            </div>
                        </div>
                    </div>
                    <hr>
                    <div class="form-group">
                        <label for="zipcode">Zipcode</label>
                        <input type="number" class="form-control" id="zipcode">
                    </div>
                    <hr>
                    <div class="form-group">
                        <label for="applydate">Last apply date</label>
                        <input type="date" class="form-control" id="applydate">
                    </div>
                     <div class="form-group">
                        <label for="emailadress">Email address</label>
                        <input type="email" class="form-control" id="emailadress" placeholder="name@example.com">
                    </div>
                    <div class="form-group">
                        <label for="description">Description</label>
                        <input type="textarea" class="form-control" id="description">
                    </div>
                    <button type="submit" class="btn btn-primary">Submit</button>
                </form>
            </div>
        </div>
    </div>

    @*
    <div class="placement my-settings">
    <div class = "frame">
        <div style="height: 30px;"></div>

    
    
    @*<form action=""> @*insert method to handle submit data (maybe use EditForms)
    <EditForm Model="settings" OnValidSubmit="ValidFormSubmitted"> @*EditForm uses capital V in @bind-Value, form uses lowercase v
        <DataAnnotationsValidator></DataAnnotationsValidator>
    <h3>Title</h3>
    <label for="title"> Enter Title</label>
        <InputText id="title" @bind-Value="settings.Title"></InputText>
        <p>Title set to: @settings.Title</p><br>
        <br>


    <h3>Degree</h3>
        <label for="degrees">Select your current degree:</label>
            <select name="degrees" id="degrees">
                <option value="bachelor">Bachelor</option>
                <option value="master">Master</option>
                <option value="phd">PhD</option>
                <option value="other">Other</option>
            </select>

        <br>
        <div class="divider"></div>
        <h3>Keywords</h3>
        <input type="checkbox" id="testing" name="testing" value="Testing">
        <label for="testing"> Testing</label><br>
        <input type="checkbox" id="csharp" name="csharp" value="CSharp">
        <label for="csharp"> C#</label><br>
        <input type="checkbox" id="java" name="java" value="Java">
        <label for="java"> java</label><br>
        <input type="checkbox" id="fullstack" name="fullstack" value="Fullstack">
        <label for="fullstack"> Fullstack</label><br>
        <input type="checkbox" id="frontend" name="frontend" value="Frontend">
        <label for="frontend"> Frontend</label><br>
        <input type="checkbox" id="backend" name="backend" value="Backend">
        <label for="backend"> Backend</label><br>
        <input type="checkbox" id="uml" name="uml" value="UML">
        <label for="uml"> UML</label><br>
        <input type="checkbox" id="devops" name="devops" value="Devops">
        <label for="devops"> DevOps</label><br>
        <input type="checkbox" id="communication" name="communication" value="Communication">
        <label for="communication"> Communication</label><br>
        <input type="checkbox" id="javascript" name="javascript" value="JavaScript">
        <label for="javascript"> JavaScript</label>

        <br>
        <div class="divider"></div>
        <h3>Working Hours</h3>
        <label for="zip">Enter weekly hours: </label>
        <input type="number" id="zip" name="zipcode" @bind="settings.WorkingHours">
        

        <br>
        <div class="divider"></div>
        <h3>Salary</h3>
        <span>Set avg </span>
        <input type="range" id="salary" name="salary" min="0" max="5000" step="10"
        @bind-Value="settings.MinSalary"@bind-Value:event="oninput"/>             bind-Value="@settings.MinSalary"@bind-Value:event="oninput"/>
        <p>@settings.MinSalary $</p><br>

        <br>
        <div class="divider"></div>
        <h3>Agreement</h3>
        <input type="radio" id="agreement" name="agreement" @bind="settings.Agreement"/>
        <label for="agreement">Select if you don't like bullsh*t</label><br>
        @*<input type="radio" id="agreementNo" name="agreement" value="no">
        <label for="agreementNo">No</label><br>

        <br>
        <div class="divider"></div>
        <h3>Zipcode</h3>
        <label for="zip">Enter your zipcode: </label>
        <input type="number" id="zip" name="zipcode" @bind="settings.Location">
        <br>

        <br>
        <div class="divider"></div>
        <label for="lastapply"> Enter last apply date</label>
        <input type="date" name="lastApply" id="lastapply" @bind-Value="settings.Date" @bind-Value:event="oninput">
        <br>

        <br>
        <div class="divider"></div>
        <label for="email"> Enter email</label>
        <InputText id="email" @bind-Value="settings.Email"></InputText>
        <p>Email set to: @settings.Email</p><br>
        <input type="email" @bind="settings.Email"> </input>
        <br>


        <br>
        <div class="divider"></div>
        <label for="description"> Placement Description</label>
        <InputText id="description" @bind-Value="settings.Description"></InputText>
        <br>

        <br><br>
        <div class="divider"></div>
        <input type="submit" value="Submit"> @*submit form returns action/method call up top
                                               create own write to database button upon click
        
        @*image


        <ValidationSummary></ValidationSummary>     @*prints summary here


    </EditForm>
    </div>
    </div> -->*@
}

@code {
    private String[] keywords;
    
    protected override async Task OnInitializedAsync()
    {
        keywords = await httpClient.GetFromJsonAsync<String[]>("KeywordRepository");
    }

    @*Settings settings = new Settings();*@

    public void ValidFormSubmitted()
    {
        return;
    }
    

    class Settings //: MatchingAttributes
    {
         public int Id { get; set; }

        [Required]
        public string Title { get; set; }

        [Required]
        public Degree Degree { get; set; }

        // [Required]
        // public int KeywordWrapperId { get; set; }

        [Required]
        public int MinSalary { get; set; }

        [Required]
        public bool Agreement { get; set; }

        [Required]
        public int Location { get; set; } //zip (was string)

        [Required]

        public string Email { get; set; }

        [Required]
        public string Description { get; set; }

        [Required]
        public int WorkingHours { get; set; }

        [Required]
        public DateTime Date { get; set; }

        // implement keywords
    }
}