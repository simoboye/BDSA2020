@page "/placementdescriptioncreation"
@using Entities
@using System.ComponentModel.DataAnnotations;
@using BDSA2020.Shared;
@using Newtonsoft.Json;
@using System;
@using System.Text;
@using System.Net.Http;
@inject HttpClient httpClient


@if (keywords == null)
{
    <p><em>Loading...</em></p>
}
else
{    
    <div class="container settingsView">
        <div class="row">
            <div class="col-12">
                <h1>Create Placement Description</h1>
            </div>
        </div>
        <div class="row">
            <div class="col-12">
                <form>
                    @* TODO: Implement secret input from user *@    
                    <input type="hidden" class="form-check-input" id="userID">
                    <hr>
                    <div class="form-group">
                        <label for="degree">Degree</label>
                        <select class="form-control" id="degree">
                            @* TODO: Retrieve these from enum*@    
                            <option selected="selected" value="bachelor">Please select</option>
                        </select>
                    </div>
                    <hr>
                    <div class="form-group">
                        <label for="keywordSelect">Keywords</label>
                        <div class="form-group row" id="keywordSelect">
                            <div class="col-sm-6">
                                @for(var i = 0; i<keywords.Length/2; i++){
                                    <div class="form-check">
                                        <input type="checkbox" class="form-check-input" id='@(keywords[i].ToString())'>
                                        <label class="form-check-label" for="exampleCheck1">@keywords[i]</label>
                                    </div>
                                }
                            </div>
                            <div class="col-sm-6">
                                @for(var i = keywords.Length/2; i<keywords.Length; i++){
                                    <div class="form-check">
                                        <input type="checkbox" class="form-check-input" id='@(keywords[i].ToString())'>
                                        <label class="form-check-label" for="exampleCheck1">@keywords[i]</label>
                                    </div>
                                }                                
                            </div>
                        </div>
                    </div>
                    <hr>
                    <div class="form-group row">
                        <label for="workingHours" class="col-sm-5 col-form-label">Working-hours</label>
                        <div class="col-sm-7">
                            <input type="number" class="form-control" id="workingHours">
                        </div>
                    </div>
                    <hr>
                    <div class="form-group">
                        <label for="salary">Salary</label>
                        <input type="range" class="custom-range" id="salary" min="0" max="100">
                    </div>
                    <hr>
                    <label>Agreement</label>
                    <div class="form-row">
                        <div class="form-group col-md-6">
                            <div class="form-check">
                                <input class="form-check-input" type="radio" name="yesAgreement" id="yesAgreement" value="yes" checked>
                                <label class="form-check-label" for="yesAgreement">
                                    Yes
                                </label>
                            </div>
                        </div>
                        <div class="form-group col-md-6">
                            <div class="form-check">
                                <input class="form-check-input" type="radio" name="noAgreement" id="noAgreement" value="no">
                                <label class="form-check-label" for="noAgreement">
                                    No
                                </label>
                            </div>
                        </div>
                    </div>
                    <hr>
                    <div class="form-group">
                        <label for="zipcode">Zipcode</label>
                        <input type="number" class="form-control" id="zipcode">
                    </div>
                    <hr>
                    <div class="form-group">
                        <label for="applydate">Last apply date</label>
                        <input type="date" class="form-control" id="applydate">
                    </div>
                     <div class="form-group">
                        <label for="emailadress">Email address</label>
                        <input type="email" class="form-control" id="emailadress" placeholder="name@example.com">
                    </div>
                    <div class="form-group">
                        <label for="description">Description</label>
                        <input type="textarea" class="form-control" id="description">
                    </div>
                    <button type="submit" class="btn btn-primary">Submit</button>
                </form>
            </div>
        </div>
    </div>
}

@code {
    //CreatePlacementDescriptionDTO dto = new CreatePlacementDescriptionDTO();
    Settings settings = new Settings();
                                           
    private String[] keywords;
    
    protected override async Task OnInitializedAsync()
    {
        keywords = await httpClient.GetFromJsonAsync<String[]>("KeywordRepository");
    }

    @*Settings settings = new Settings();*@

    private async Task AddToSaves(CreatePlacementDescriptionDTO dto)    //Task<HttpResponseMessage>
    {
        var json = JsonConvert.SerializeObject(dto);
        var data = new StringContent(json, Encoding.UTF8, "application/json");

        var response = await httpClient.PostAsync($"PlacementDescriptionRepository/create", data);
        var result = response.Content.ReadAsStringAsync().Result;
        Console.WriteLine(result);

        //return await httpClient.PutAsJsonAsync($"PlacementDescriptionRepository/update", dto);
        // someVariable = await httpClient.DeleteAsync($"PlacementDescriptionRepository/delete/{id}", dto);   
        
    }

    public void ValidFormSubmitted()
    {
        return;
    }
    

    class Settings //: MatchingAttributes
    {
         public int Id { get; set; }

        [Required]
        public string Title { get; set; }

        [Required]
        public Degree Degree { get; set; }

        // [Required]
        // public int KeywordWrapperId { get; set; }

        [Required]
        public int MinSalary { get; set; }

        [Required]
        public bool AgreementÂ { get; set; }

        [Required]
        public int Location { get; set; } //zip (was string)

        [Required]

        public string Email { get; set; }

        [Required]
        public string Description { get; set; }

        [Required]
        public int WorkingHours { get; set; }

        [Required]
        public DateTime Date { get; set; }

        // implement keywords
    }
    /*
    public Degree Degree { get; set; }
        public ICollection<string> KeywordNames { get; set; }
        public int MinSalary { get; set; }
        public int MinWorkingHours { get; set; }
        public int MaxWorkingHours { get; set; }
        public bool Agreement { get; set; }
        public string Location { get; set; }
        public DateTime LastApplyDate { get; set; }
        public string Email { get; set; }
        public Uri Thumbnail { get; set; }
        public string Title { get; set; }
        public string Description { get; set; }
        public string CompanyName { get; set; }
    */
}