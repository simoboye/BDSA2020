@page "/placementdescriptioncreation"
@using Entities
@using System.ComponentModel.DataAnnotations;
@using BDSA2020.Shared;
@using Newtonsoft.Json;
@using System;
@using System.Text;
@using System.Net.Http;
@inject HttpClient httpClient



@if (false)
{
    <p><em>Loading...</em></p>
}
else
{    
    <h5>Create Placement Description</h5>
    <div class="placement my-settings">
    <div class = "frame">
        <div style="height: 30px;"></div>

    
    
    @*<form action=""> @*insert method to handle submit data (maybe use EditForms)*@
    <EditForm Model="settings" OnValidSubmit="ValidFormSubmitted"> @*EditForm uses capital V in @bind-Value, form uses lowercase v*@
        <DataAnnotationsValidator></DataAnnotationsValidator>
    <h3>Title</h3>
    <label for="title"> Enter Title</label>
        <InputText id="title" @bind-Value="settings.Title"></InputText>
        <p>Title set to: @settings.Title</p><br>
        <br>


    <h3>Degree</h3>
        <label for="degrees">Select your current degree:</label>
            <select name="degrees" id="degrees">
                <option value="bachelor">Bachelor</option>
                <option value="master">Master</option>
                <option value="phd">PhD</option>
                <option value="other">Other</option>
            </select>

        <br>
        <div class="divider"></div>
        <h3>Keywords</h3>
        <input type="checkbox" id="testing" name="testing" value="Testing">
        <label for="testing"> Testing</label><br>
        <input type="checkbox" id="csharp" name="csharp" value="CSharp">
        <label for="csharp"> C#</label><br>
        <input type="checkbox" id="java" name="java" value="Java">
        <label for="java"> java</label><br>
        <input type="checkbox" id="fullstack" name="fullstack" value="Fullstack">
        <label for="fullstack"> Fullstack</label><br>
        <input type="checkbox" id="frontend" name="frontend" value="Frontend">
        <label for="frontend"> Frontend</label><br>
        <input type="checkbox" id="backend" name="backend" value="Backend">
        <label for="backend"> Backend</label><br>
        <input type="checkbox" id="uml" name="uml" value="UML">
        <label for="uml"> UML</label><br>
        <input type="checkbox" id="devops" name="devops" value="Devops">
        <label for="devops"> DevOps</label><br>
        <input type="checkbox" id="communication" name="communication" value="Communication">
        <label for="communication"> Communication</label><br>
        <input type="checkbox" id="javascript" name="javascript" value="JavaScript">
        <label for="javascript"> JavaScript</label>

        <br>
        <div class="divider"></div>
        <h3>Working Hours</h3>
        <label for="zip">Enter weekly hours: </label>
        <input type="number" id="zip" name="zipcode" @bind="settings.WorkingHours">
        

        <br>
        <div class="divider"></div>
        <h3>Salary</h3>
        <span>Set avg </span>
        <input type="range" id="salary" name="salary" min="0" max="5000" step="10"
        @bind-Value="settings.MinSalary"@bind-Value:event="oninput"/>             @*@bind-Value="@settings.MinSalary"@bind-Value:event="oninput"/>*@
        <p>@settings.MinSalary $</p><br>

        <br>
        <div class="divider"></div>
        <h3>Agreement</h3>
        <input type="radio" id="agreement" name="agreement" @bind="settings.Agreement"/>
        <label for="agreement">Select if you don't like bullsh*t</label><br>
        @*<input type="radio" id="agreementNo" name="agreement" value="no">
        <label for="agreementNo">No</label><br>*@

        <br>
        <div class="divider"></div>
        <h3>Zipcode</h3>
        <label for="zip">Enter your zipcode: </label>
        <input type="number" id="zip" name="zipcode" @bind="settings.Location">
        <br>

        <br>
        <div class="divider"></div>
        <label for="lastapply"> Enter last apply date</label>
        <input type="date" name="lastApply" id="lastapply" @bind-Value="settings.Date" @bind-Value:event="oninput">
        <br>

        <br>
        <div class="divider"></div>
        <label for="email"> Enter email</label>
        <InputText id="email" @bind-Value="settings.Email"></InputText>
        <p>Email set to: @settings.Email</p><br>
        @*<input type="email" @bind="settings.Email"> </input>*@
        <br>


        <br>
        <div class="divider"></div>
        <label for="description"> Placement Description</label>
        <InputText id="description" @bind-Value="settings.Description"></InputText>
        <br>

        <br><br>
        <div class="divider"></div>
        <input type="submit" value="Submit"> @*submit form returns action/method call up top
                                               create own write to database button upon click*@
        
        @*image*@


        <ValidationSummary></ValidationSummary>     @*prints summary here*@


    </EditForm>
    </div>
    </div>
}

@code {
    CreatePlacementDescriptionDTO dto = new CreatePlacementDescriptionDTO(); //strong coupling. the shame.
    Settings settings = new Settings();

    private async Task AddToSaves(CreatePlacementDescriptionDTO dto)    //Task<HttpResponseMessage>
    {
        var json = JsonConvert.SerializeObject(dto);
        var data = new StringContent(json, Encoding.UTF8, "application/json"); // application/json?

        var response = await httpClient.PostAsync($"PlacementDescriptionRepository/create", data);
        var result = response.Content.ReadAsStringAsync().Result;
        Console.WriteLine(result);

        //return await httpClient.PutAsJsonAsync($"https://localhost:5000/PlacementDescriptionRepository/create", dto);   
    }

    public void ValidFormSubmitted()
    {
        return;
    }
    

    class Settings //: MatchingAttributes
    {
         public int Id { get; set; }

        [Required]
        public string Title { get; set; }

        [Required]
        public Degree Degree { get; set; }

        // [Required]
        // public int KeywordWrapperId { get; set; }

        [Required]
        public int MinSalary { get; set; }

        [Required]
        public bool AgreementÂ { get; set; }

        [Required]
        public int Location { get; set; } //zip (was string)

        [Required]

        public string Email { get; set; }

        [Required]
        public string Description { get; set; }

        [Required]
        public int WorkingHours { get; set; }

        [Required]
        public DateTime Date { get; set; }

        // implement keywords
    }
    /*
    public Degree Degree { get; set; }
        public ICollection<string> KeywordNames { get; set; }
        public int MinSalary { get; set; }
        public int MinWorkingHours { get; set; }
        public int MaxWorkingHours { get; set; }
        public bool Agreement { get; set; }
        public string Location { get; set; }
        public DateTime LastApplyDate { get; set; }
        public string Email { get; set; }
        public Uri Thumbnail { get; set; }
        public string Title { get; set; }
        public string Description { get; set; }
        public string CompanyName { get; set; }
    */
}