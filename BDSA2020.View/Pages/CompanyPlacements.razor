@page "/companyplacements"
@using Entities
@inject HttpClient httpClient

@using System.Security.Claims
@using Microsoft.AspNetCore.Authentication.AzureADB2C.UI
@using Microsoft.Extensions.Options
@inject IOptionsMonitor<AzureADB2COptions> AzureADB2COptions
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider
@using System.Collections.Generic; 
@using System;
@using System.Linq;

@using BDSA2020.Shared;
@inject HttpClient httpClient
@using Newtonsoft.Json;
@inject IJSRuntime JS;

@using System.Text;
@using System.Net.Http;


@if (_companyPlacementDescriptionIds == null || _placementDescriptions == null)
{
    <p><em>Loading...</em></p>
}
else
{    
    <div class="row">
        <div class="col-sm-3"></div>
        <div class="col-sm-6">
            <h1>Our placement descriptions</h1>
            <hr>
        </div>
        <div class="col-sm-3"></div>
    </div> 
    <div class="row">
        <div class="col-sm-3"></div>
        <div class="col-sm-6">
            @foreach (var placement in _placementDescriptions)
            if( _companyPlacementDescriptionIds.Contains(placement.Id))
            {
                <div class="card savedCard">
                    <img class="card-img-top" src="@placement.Thumbnail" alt="Card image cap">
                    <div class="card-body">
                        <h5 class="card-title">@placement.Title</h5>
                        <p class="card-text">@placement.Description</p>
                        <a href="#" class="btn btn-primary">Edit</a>
                        <a href="#" class="card-link">More</a>
                    </div>
                </div>
                <hr>
            }
        </div>
        <div class="col-sm-3"></div>
    </div>
}

@code {

    private Guid _userId;
    private PlacementDescriptionDetailsDTO[] _placementDescriptions;
    List<int> _companyPlacementDescriptionIds = new List<int>();
    
    
    private int currentCount = 0;

    

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        _userId = Guid.Parse(user.FindFirst(c => c.Type == ClaimTypes.NameIdentifier)?.Value);
        _userId = Guid.Parse("3fa85f64-5717-4562-b3fc-2c963f66afa6"); // hardcoded to return value (delete)
        
        try
        {
            var companyInfo = await httpClient.GetFromJsonAsync<CompanyDetailsDTO>($"CompanyRepository/{_userId}");
            _companyPlacementDescriptionIds = companyInfo.PlacementDescriptionIds.ToList();
        } 
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
        _placementDescriptions = await httpClient.GetFromJsonAsync<PlacementDescriptionDetailsDTO[]>("PlacementDescriptionRepository");
    }

     private void IncrementCount()
    {
        if (this.currentCount == _placementDescriptions.Length - 1) { return; }
        currentCount++;
    }

    private void DecrementCount()
    {
        if (this.currentCount == 0) { return; }
        currentCount--;
    }

    private string GetLastApplyDate()
    {
        var applyDate = _placementDescriptions[this.currentCount].LastApplyDate;
        return applyDate.ToShortDateString();
    }

    private string DaysRemaining()
    {
        var applyDate = _placementDescriptions[this.currentCount].LastApplyDate;
        DateTime today = DateTime.Now;
        var daysLeft = applyDate.Subtract(today);
        return (daysLeft.Days + 1).ToString(); 
    }
}