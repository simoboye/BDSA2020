@page "/"
@using BDSA2020.Shared
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager Navigation
@inject HttpClient httpClient
@inject UserPropertiesService userPropertiesService

@code {
    private string _authMessage;
    private string _surnameMessage;
    private IEnumerable<Claim> _claims = Enumerable.Empty<Claim>();

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            _authMessage = $"{user.Identity.Name} is authenticated.";
            _claims = user.Claims;
            userPropertiesService.Surname = 
                $"Surname: {user.FindFirst(c => c.Type == ClaimTypes.Surname)?.Value}";
            userPropertiesService.UserId = Guid.Parse(user.FindFirst(c => c.Type == ClaimTypes.NameIdentifier)?.Value);
            userPropertiesService.IsCompany = bool.Parse(user.FindFirst(u => u.Type.Equals("extension_isCompany"))?.Value);

            if (userPropertiesService.IsCompany)
            {
                await CheckIfCompanyExits();
            }
            else 
            {
                await CheckIfStudentExits();
            }
        }
        else
        {
            _authMessage = "The user is NOT authenticated.";
        }
    }

    private async Task CheckIfStudentExits()
    {
        try {
            var student = await httpClient.GetFromJsonAsync<StudentDetailsDTO>($"StudentRepository/{userPropertiesService.UserId}");
            Navigation.NavigateTo("/placementdescription", true);
        } catch (HttpRequestException e)
        {
            Console.WriteLine(e);
            if (e.Message.Contains("500")) // TODO find a way to get the status code
            {
                Console.WriteLine("Internal server error"); // TODO Redirect to error page
            }
            else
            {
                Navigation.NavigateTo("/profilesettings", true);
            }
        }
    }

    private async Task CheckIfCompanyExits()
    {
        try {
            var company = await httpClient.GetFromJsonAsync<CompanyDetailsDTO>($"CompanyRepository/{userPropertiesService.UserId}");
            Navigation.NavigateTo("/placementdescriptioncreation", true);
        } catch (HttpRequestException e)
        {
            Console.WriteLine(e);
            if (e.Message.Contains("500")) // TODO find a way to get the status code
            {
                Console.WriteLine("Internal server error"); // TODO Redirect to error page
            }
            else
            {
                Navigation.NavigateTo("/profilesettings", true);
            }
        }
    }
}