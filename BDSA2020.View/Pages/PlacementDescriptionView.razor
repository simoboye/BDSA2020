@page "/placementdescription"

@using System.Security.Claims
@using Microsoft.AspNetCore.Authentication.AzureADB2C.UI
@using Microsoft.Extensions.Options
@inject IOptionsMonitor<AzureADB2COptions> AzureADB2COptions
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider

@using BDSA2020.Shared;
@inject HttpClient httpClient
@using Newtonsoft.Json;
@inject IJSRuntime JS;

@using System;
@using System.Text;
@using System.Net.Http;


@if (_placementDescriptions == null)
{
    <p><em>Loading...</em></p>
}
else 
{
<div class="scroll-container" id="scroll-container">
    <!-- Four placeholder Placement Descriptions-->

    @foreach (var item in _placementDescriptions)
    {
        var itemId = item.Id - 1;
        <div class="placement scroll-area">
            <div class = "frame">
                <div style="height: 30px;"></div>
                <h5>@item.Title</h5>
                <img src="@item.Thumbnail" alt="">
                    <p class = "description">@item.Description</p>
                        <div class="divider"></div>
                        <ul class="description">
                            <li>@item.MinWorkingHours</li>
                            <li>@item.Location</li>
                            <li>@item.MinSalary</li>
                        </ul>
                        <div class="divider"></div>
                        <div style="height: 20px;"></div>
                        <div class="btnPlacement more">
                            <p class="center">More</p>
                        </div>
                    <p>@_userId</p>
                    <p class="boldText">Last apply date: @GetLastApplyDate(itemId)</p>
                    <p class="boldText">Days remaining: @DaysRemaining(itemId)</p>
                    <button class="btn btn-save" @onclick="() => AddToSaves(itemId)">&heartsuit;</button>  
                </div>
            </div>
    }
</div>
}

<div class="frame">
    <div class="btnPlacement apply">
        <p class="center">Apply</p>
    </div>
  
    <div class="row center">
        <div onclick="goPrev()" class="column"style="background-color:white;">^</div>
        <div class="like"  style="background-color: black; color: white;"></div>
        <div onclick="goNext()" class="column" style="background-color:white;">v</div>
    </div>
</div>


@code {
    private Guid _userId;
    private PlacementDescriptionDetailsDTO[] _placementDescriptions;
    private int _savedId;
        
     protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        _userId = Guid.Parse(user.FindFirst(c => c.Type == ClaimTypes.NameIdentifier)?.Value);

        _placementDescriptions = await httpClient.GetFromJsonAsync<PlacementDescriptionDetailsDTO[]>("PlacementDescriptionRepository");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        //To run JS AFTER Blazor is done loading application
        await JS.InvokeAsync<string>("CardAnimation");
    }

    private async Task<HttpResponseMessage> AddToSaves(int placementDescriptionId)
    {
        placementDescriptionId = placementDescriptionId + 1;
        Console.WriteLine(placementDescriptionId);

        var json = JsonConvert.SerializeObject(placementDescriptionId);
        var data = new StringContent(json, Encoding.UTF8, "application/json");
        _userId = Guid.Parse("984ccbee-0229-46b0-a11d-d70ad5ba204c"); // hardcoded to return value (delete)
        return await httpClient.PatchAsync($"StudentRepository/save/{_userId}/{placementDescriptionId}", null);
    }

    private string GetLastApplyDate(int id)
    {
        var applyDate = _placementDescriptions[id].LastApplyDate;
        return applyDate.ToShortDateString();
    }

    private string DaysRemaining(int id)
    {
        var applyDate = _placementDescriptions[id].LastApplyDate;
        DateTime today = DateTime.Now;
        var daysLeft = applyDate.Subtract(today);
        return (daysLeft.Days + 1).ToString(); 
    }
}



@*
@if (students == null){

}

@if (placementDescriptions == null)
{
    <p><em>Loading...</em></p>
}
else
{

}

@code {
    private Student[] students;


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        //To run JS AFTER Blazor is done loading application
        await JS.InvokeAsync<string>("CardAnimation");
    }
}
{    
    <h5>Placement Descriptions</h5>
    <div class="placement my-card">
    <div class = "frame">
        <div style="height: 30px;"></div>
    <h5>LEO Pharma - @placementDescriptions[currentCount].Title</h5>
    <img src="@placementDescriptions[currentCount].Thumbnail" alt="">
    <p class = "description">@placementDescriptions[currentCount].Description</p>
        <div class="divider"></div>
    <ul class="description">
            <li>Min hours weekly: @placementDescriptions[currentCount].MinWorkingHours</li>
            <li>Degree: @placementDescriptions[currentCount].Degree</li>
            <li>Location: @placementDescriptions[currentCount].Location</li>
            <li>Min salary: @placementDescriptions[currentCount].MinSalary</li>
            <li>Email: @placementDescriptions[currentCount].Email</li>
    </ul>
        <div class="divider"></div>
        <div style="height: 20px;"></div>
        <div class = "btnPlacement">
            <a href="https://www.google.com">More</a>
        </div>
        <div class = "btnApplyPlacement">
        <a href="mailto:Goolge.com">Apply Now</a>
    </div>
    </div>
    
    
    @*<p>PlacementDescription: @currentCount</p>
</div>
<p class= "applyDate"> Placement Description Duration: @(GetLastApplyDate())</p>
<p class= "applyDate"> Days Remaining: @(DaysRemaining())</p>
<button class="btn btn-primary" @onclick="DecrementCount">Back</button>
<button class="btn btn-save" @onclick="DecrementCount">&heartsuit;</button>
<button class="btn btn-primary" @onclick="IncrementCount">Next</button>


@code {
    private PlacementDescription[] placementDescriptions;
    private int currentCount = 0;

    protected override async Task OnInitializedAsync()
    {
        students = await httpClient.GetFromJsonAsync<Student[]>("StudentRepository");
        placementDescriptions = await httpClient.GetFromJsonAsync<PlacementDescription[]>("PlacementDescriptionRepository");
    }

    // Implement write to Saved, method.
    // Save placementdescription-ID in database.

     private void IncrementCount()
    {
        if (this.currentCount == placementDescriptions.Length - 1) { return; }
        currentCount++;
    }

    private void DecrementCount()
    {
        if (this.currentCount == 0) { return; }
        currentCount--;
    }
}*@
