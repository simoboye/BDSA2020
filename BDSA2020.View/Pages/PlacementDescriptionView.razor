@page "/placementdescription"

@using BDSA2020.Shared;
@inject HttpClient httpClient
@inject IMatchingService service
@inject IJSRuntime JS;
@inject UserPropertiesService userPropertiesService

@if (matches == null)
{
    <p><em>Loading...</em></p>
}
else 
{
    <div class="scroll-container" id="scroll-container">
        @foreach (var match in matches)
        {
            <div class="placement scroll-area">
                <div class="frame">
                    <div>Matching score: @match.MatchScore</div>
                    <div style="height: 30px;"></div>
                    <h5>@match.Title</h5>
                    <img src="@match.Thumbnail" alt="Thumbnail">
                    <p class = "description">@match.Description</p>
                    <div class="divider"></div>
                    <ul class="description">
                        <li>@match.MinWorkingHours</li>
                        <li>@match.Location</li>
                        <li>@match.MinSalary</li>
                    </ul>
                    <div class="divider"></div>
                    <div style="height: 20px;"></div>
                    <div class="btnPlacement more">
                        <p class="center">More</p>
                    </div>
                    <p class="boldText">Last apply date: @GetLastApplyDate(match)</p>
                    <p class="boldText">Days remaining: @DaysRemaining(match)</p>
                </div>
            </div>
        }
    </div>
}

<div class="frame">
    <div class="btnPlacement apply">
        <p class="center">Apply</p>
    </div>
  
    <div class="row center">
        <div onclick="goPrev()" class="column"style="background-color:white;">^</div>
        <div class="like"  style="background-color: black; color: white;"></div>
        <div onclick="goNext()" class="column" style="background-color:white;">v</div>
    </div>
</div>


@code {
    private PlacementDescriptionMatch[] matches;
        
    protected override async Task OnInitializedAsync()
    {
        var placementDescriptions = await httpClient.GetFromJsonAsync<PlacementDescriptionDetailsDTO[]>("PlacementDescriptionRepository");
        
        var student = await httpClient.GetFromJsonAsync<StudentDetailsDTO>("StudentRepository/290c1a5f-3790-4bcb-89dc-6a4c3de155d1");
        Console.WriteLine(userPropertiesService.UserId);
        @* var student = await httpClient.GetFromJsonAsync<StudentDetailsDTO>($"StudentRepository/{userPropertiesService.UserId}"); *@

        matches = service.CalculateMatches(student, placementDescriptions).ToArray();
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        //To run JS AFTER Blazor is done loading application
        await JS.InvokeAsync<string>("CardAnimation");
    }

    private string GetLastApplyDate(PlacementDescriptionMatch match)
    {
        var applyDate = match.LastApplyDate;
        return applyDate.ToShortDateString();
    }

    private string DaysRemaining(PlacementDescriptionMatch match)
    {
        var applyDate = match.LastApplyDate;
        DateTime today = DateTime.Now;
        var daysLeft = applyDate.Subtract(today);
        return (daysLeft.Days + 1).ToString(); 
    }
}
