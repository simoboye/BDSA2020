@page "/placementdescription"

@using System.Security.Claims
@using Microsoft.AspNetCore.Authentication.AzureADB2C.UI
@using Microsoft.Extensions.Options
@inject IOptionsMonitor<AzureADB2COptions> AzureADB2COptions
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider

@using BDSA2020.Shared;
@inject HttpClient httpClient
@using Newtonsoft.Json;
@inject IMatchingService service
@inject IJSRuntime JS;
@inject UserPropertiesService userPropertiesService
@using System;
@using System.Text;
@using System.Net.Http;



@if (matches == null)
{
    <p><em>Loading...</em></p>
}
else 
{
    <div class="container placementDescriptionView">
        <div class="row">
            <div class="col-sm-3">
            </div>
            <div class="col-sm-6 placementContainer">
                <div class="placementCarousel">
                    @foreach (var item in matches)
                    { 
                        <div class="card scroll-area placement">  
                            <img class="card-img-top" src="@item.Thumbnail" alt="">
                            <div class="card-body">
                                <h5 class="card-title">@item.Title</h5>
                                <p class="card-text">@item.Description</p>
                            </div>
                            <ul class="list-group list-group-flush">
                                <li class="list-group-item"><b>Minimum workinghours: </b>@item.MinWorkingHours</li>
                                <li class="list-group-item"><b>Location: </b>@item.Location</li>
                                <li class="list-group-item"><b>Salary: </b>@item.MinSalary</li>
                                <li class="list-group-item"><b>Last apply date: </b>@GetLastApplyDate(item)</li>
                                <li class="list-group-item"><b>Days remaining: </b>@DaysRemaining(item)</li>
                                <li class="list-group-item"><b>Matching score: </b>@item.MatchScore</li>
                            </ul>
                            <div class="card-body">
                                <button type="button" class="btn btn-primary btn-lg btn-block">Apply now</button>
                                <button type="button" class="btn btn-primary btn-lg btn-block" @onclick="() => AddToSaves(item.Id)">&#10084;</button>
                            </div>
                        </div>
                    }
                </div>
            </div>
            <div class="col-sm-3">

            </div>
        </div>
        <div class="d-flex flex-row buttonrow justify-content-center">
            <div class="p-2">
                <button type="button" onclick="goPrev()" class="btn btn-primary">Last</button>
            </div>
            <div class="p-2">
                <button type="button" onclick="goNext()" class="btn btn-primary">Next</button>
            </div>
        </div>
    </div>
}

@code {
    private PlacementDescriptionMatch[] matches;
        
    protected override async Task OnInitializedAsync()
    {
        var placementDescriptions = await httpClient.GetFromJsonAsync<PlacementDescriptionDetailsDTO[]>("PlacementDescriptionRepository");
        
        var student = await httpClient.GetFromJsonAsync<StudentDetailsDTO>("StudentRepository/290c1a5f-3790-4bcb-89dc-6a4c3de155d1");
        Console.WriteLine(userPropertiesService.UserId);
        @* var student = await httpClient.GetFromJsonAsync<StudentDetailsDTO>($"StudentRepository/{userPropertiesService.UserId}"); *@

        matches = service.CalculateMatches(student, placementDescriptions).ToArray();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        //To run JS AFTER Blazor is done loading application
        await JS.InvokeAsync<string>("CardAnimation");
    }

    private async void AddToSaves(int placementDescriptionId)
    {
        //placementDescriptionId = placementDescriptionId + 1;
        Console.WriteLine(placementDescriptionId);

        var json = JsonConvert.SerializeObject(placementDescriptionId);
        var data = new StringContent(json, Encoding.UTF8, "application/json");
        
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var _userId = Guid.Parse(user.FindFirst(c => c.Type == ClaimTypes.NameIdentifier)?.Value);
        //_userId = Guid.Parse("5a87427d-f0af-421d-a340-7d9dd8f9f76e"); // hardcoded to return value (delete)
        Console.WriteLine(_userId + ": " + "(YOUR CURRENTLY LOGGED IN USER)");

        using (var response = await httpClient.PatchAsync($"StudentRepository/save/{_userId}/{placementDescriptionId}", null))
        {
            try 
            {
                response.EnsureSuccessStatusCode();
                Console.WriteLine(await response.Content.ReadAsStringAsync());
            }
            catch (Exception e)
            {
                Console.WriteLine(e);
            }
        }
    }

    private string GetLastApplyDate(PlacementDescriptionMatch match)
    {
        var applyDate = match.LastApplyDate;
        return applyDate.ToShortDateString();
    }

    private string DaysRemaining(PlacementDescriptionMatch match)
    {
        var applyDate = match.LastApplyDate;
        DateTime today = DateTime.Now;
        var daysLeft = applyDate.Subtract(today);
        return (daysLeft.Days + 1).ToString(); 
    }
}
