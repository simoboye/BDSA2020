@page "/mysaves"

@using System.Security.Claims
@using Microsoft.AspNetCore.Authentication.AzureADB2C.UI
@using Microsoft.Extensions.Options
@inject IOptionsMonitor<AzureADB2COptions> AzureADB2COptions
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider

@using Entities
@using BDSA2020.Shared;
@inject HttpClient httpClient


@if (placementDescriptions == null)
{
    <p><em>Loading...</em></p>
}
else
{    
    <table class="table">
        <thead>
            <tr>
                <th>My Saves &heartsuit;</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var placement in placementDescriptions)
                    //(var saves in mySaves)
            {
                <tr>
                    <div class="placement my-cardSaved">
        <div class = "frame">
        <div style="height: 30px;"></div>
        <h5>LEO Pharma - @placementDescriptions[currentCount].Title</h5>    @*replace currentCount -> saves.getPlacementDescId*@
        <img src="@placementDescriptions[currentCount].Thumbnail" alt="">   @*replace currentCount -> saves.getPlacementDescId*@
        <div class="divider"></div>
        <div style="height: 20px;"></div>
        <div class = "btnPlacement">
            <a href="https://www.google.com">More</a>
        </div>
        <div class = "btnApplyPlacement">
            <a href="mailto:Goolge.com">Apply Now</a>
        </div>
        </div>
        </div>
        <p class= "applyDate"> Placement Description Duration: @(GetLastApplyDate())</p>
        <p class= "applyDate"> Days Remaining: @(DaysRemaining())</p>
                        </tr>
                currentCount++; 
                }
            </tbody>
        </table>
}


@code {
    private Guid _userId;
    private PlacementDescriptionDetailsDTO[] placementDescriptions;
    private int currentCount = 0;

    

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        _userId = Guid.Parse(user.FindFirst(c => c.Type == ClaimTypes.NameIdentifier)?.Value);

        _userId = Guid.Parse("984ccbee-0229-46b0-a11d-d70ad5ba204c"); // hardcoded to return value (delete)

        var _studentInfo = await httpClient.GetFromJsonAsync<StudentDetailsDTO>($"StudentRepository/{_userId}");
        var studentPlacementDescription = _studentInfo.PlacementDescriptionIds.ToArray();
        
        /*test*/
        var placementDescrip = await httpClient.GetFromJsonAsync<PlacementDescriptionDetailsDTO>($"PlacementDescriptionRepository/{1}");
        placementDescriptions.Append(placementDescrip);

        /*
        foreach (int i in studentPlacementDescription)
        {
            var placementDescription = await httpClient.GetFromJsonAsync<PlacementDescriptionDetailsDTO>($"PlacementDescriptionRepository/{studentPlacementDescription[i]}");
            placementDescriptions.Append(placementDescription);
        }
        */
    }

     private void IncrementCount()
    {
        if (this.currentCount == placementDescriptions.Length - 1) { return; }
        currentCount++;
    }

    private void DecrementCount()
    {
        if (this.currentCount == 0) { return; }
        currentCount--;
    }

    private string GetLastApplyDate()
    {
        var applyDate = placementDescriptions[this.currentCount].LastApplyDate;
        return applyDate.ToShortDateString();
    }

    private string DaysRemaining()
    {
        var applyDate = placementDescriptions[this.currentCount].LastApplyDate;
        DateTime today = DateTime.Now;
        var daysLeft = applyDate.Subtract(today);
        return (daysLeft.Days + 1).ToString(); 
    }
}