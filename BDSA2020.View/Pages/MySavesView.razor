@page "/mysaves"

@using System.Security.Claims
@using Microsoft.AspNetCore.Authentication.AzureADB2C.UI
@using Microsoft.Extensions.Options
@inject IOptionsMonitor<AzureADB2COptions> AzureADB2COptions
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider
@using System.Collections.Generic; 
@using System;
@using System.Linq;

@using Entities
@using BDSA2020.Shared;
@inject HttpClient httpClient
@using Newtonsoft.Json;
@inject IJSRuntime JS;

@using System.Text;
@using System.Net.Http;


@if (_studentPlacementDescriptionIds == null || _placementDescriptions == null)
{
    <p><em>Loading...</em></p>
}
else
{    
    <table class="table">
        <thead>
            <tr>
                <th>My Saves &heartsuit;</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var placement in _placementDescriptions)
            {
                if( _studentPlacementDescriptionIds.Contains(placement.Id))
                {
                <tr>
                    <div class="placement my-cardSaved">
        <div class = "frame">
        <div style="height: 30px;"></div>
        <h5>@_placementDescriptions[placement.Id -1].Title</h5>    
        <img src="@_placementDescriptions[placement.Id -1].Thumbnail" alt="">
        <div class="divider"></div>
        <div style="height: 20px;"></div>
        <div class = "btnPlacement">
            <a href="https://www.google.com">More</a>
        </div>
        <div class = "btnApplyPlacement">
            <a href="mailto:Goolge.com">Apply Now</a>
        </div>
        </div>
        </div>
        <p class= "applyDate"> Placement Description Duration: @(GetLastApplyDate(placement.Id -1))</p>
        <button class="btn btn-save" @onclick="() => RemoveFromSaves(placement.Id)">&heartsuit;</button>
        <p class= "applyDate"> Days Remaining: @(DaysRemaining(placement.Id -1))</p>
                </tr>
                } 
            }
            </tbody>
        </table>
}


@code {
    private Guid _userId;

    private PlacementDescriptionDetailsDTO[] _placementDescriptions;
    //private List<PlacementDescriptionDetailsDTO> placementDescriptions;
    List<int> _studentPlacementDescriptionIds = new List<int>();

    

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        _userId = Guid.Parse(user.FindFirst(c => c.Type == ClaimTypes.NameIdentifier)?.Value);
        _userId = Guid.Parse("5a87427d-f0af-421d-a340-7d9dd8f9f76e"); // hardcoded to return value (delete)

        try
        {
            var _studentInfo = await httpClient.GetFromJsonAsync<StudentDetailsDTO>($"StudentRepository/{_userId}");
            _studentPlacementDescriptionIds = _studentInfo.PlacementDescriptionIds.ToList();
        } 
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
        _placementDescriptions = await httpClient.GetFromJsonAsync<PlacementDescriptionDetailsDTO[]>("PlacementDescriptionRepository");
        
        //var studentPlacementDescription = _studentInfo.PlacementDescriptionIds.Count;
        //placementDescriptions = new PlacementDescriptionDetailsDTO[studentPlacementDescription.Count];
        /*
        foreach (int i in studentPlacementDescription)
        {
            Console.WriteLine(i);
            var placementDescription = await httpClient.GetFromJsonAsync<PlacementDescriptionDetailsDTO>($"PlacementDescriptionRepository/{i}");
            placementDescriptions.Add(placementDescription);
        }
        */

        
        /*
        var placementDescrip = await httpClient.GetFromJsonAsync<PlacementDescriptionDetailsDTO>($"PlacementDescriptionRepository/{1}");
        */
    }


    /*
     private void IncrementCount()
    {
        if (this.currentCount == placementDescriptions.Length - 1) { return; }
        currentCount++;
    }

    private void DecrementCount()
    {
        if (this.currentCount == 0) { return; }
        currentCount--;
    }
    */

    
    private async void RemoveFromSaves(int placementDescriptionId)
    {
        var json = JsonConvert.SerializeObject(placementDescriptionId);
        var data = new StringContent(json, Encoding.UTF8, "application/json");
        _userId = Guid.Parse("5a87427d-f0af-421d-a340-7d9dd8f9f76e"); // hardcoded to return value (delete)

        using (var response = await httpClient.PatchAsync($"StudentRepository/unsave/{_userId}/{placementDescriptionId}", null))
        {
            try 
            {
                response.EnsureSuccessStatusCode();
                Console.WriteLine(await response.Content.ReadAsStringAsync());
            }
            catch (Exception e)
            {
                Console.WriteLine(e);
            }
        }
    }
    
    private string GetLastApplyDate(int placementId)
    {
        var applyDate = _placementDescriptions[placementId].LastApplyDate;
        return applyDate.ToShortDateString();
    }

    private string DaysRemaining(int placementId)
    {
        var applyDate = _placementDescriptions[placementId].LastApplyDate;
        DateTime today = DateTime.Now;
        var daysLeft = applyDate.Subtract(today);
        return (daysLeft.Days + 1).ToString(); 
    }

//_userId = Guid.Parse("ce0527df-eec0-43e1-9a9f-6546e35b695a"); // hardcoded to return value (delete)
}

